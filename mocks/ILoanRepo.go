// Code generated by mockery v2.50.4. DO NOT EDIT.

package mocks

import (
	model "backend/domain/model"

	mock "github.com/stretchr/testify/mock"
)

// ILoanRepo is an autogenerated mock type for the ILoanRepo type
type ILoanRepo struct {
	mock.Mock
}

// Create provides a mock function with given fields: loan
func (_m *ILoanRepo) Create(loan *model.Loan) (*model.Loan, error) {
	ret := _m.Called(loan)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *model.Loan
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.Loan) (*model.Loan, error)); ok {
		return rf(loan)
	}
	if rf, ok := ret.Get(0).(func(*model.Loan) *model.Loan); ok {
		r0 = rf(loan)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Loan)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.Loan) error); ok {
		r1 = rf(loan)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPaidListByUserID provides a mock function with given fields: id
func (_m *ILoanRepo) GetPaidListByUserID(id uint) ([]model.Loan, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetPaidListByUserID")
	}

	var r0 []model.Loan
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) ([]model.Loan, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) []model.Loan); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Loan)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewILoanRepo creates a new instance of ILoanRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewILoanRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *ILoanRepo {
	mock := &ILoanRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.50.4. DO NOT EDIT.

package mocks

import (
	dto "backend/domain/dto"

	mock "github.com/stretchr/testify/mock"
)

// ILoanUcase is an autogenerated mock type for the ILoanUcase type
type ILoanUcase struct {
	mock.Mock
}

// CreateNewLoan provides a mock function with given fields: userUUID, payload
func (_m *ILoanUcase) CreateNewLoan(userUUID string, payload dto.CreateNewLoanReq) (*dto.CreateNewLoanRespData, error) {
	ret := _m.Called(userUUID, payload)

	if len(ret) == 0 {
		panic("no return value specified for CreateNewLoan")
	}

	var r0 *dto.CreateNewLoanRespData
	var r1 error
	if rf, ok := ret.Get(0).(func(string, dto.CreateNewLoanReq) (*dto.CreateNewLoanRespData, error)); ok {
		return rf(userUUID, payload)
	}
	if rf, ok := ret.Get(0).(func(string, dto.CreateNewLoanReq) *dto.CreateNewLoanRespData); ok {
		r0 = rf(userUUID, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.CreateNewLoanRespData)
		}
	}

	if rf, ok := ret.Get(1).(func(string, dto.CreateNewLoanReq) error); ok {
		r1 = rf(userUUID, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLoanList provides a mock function with given fields: params
func (_m *ILoanUcase) GetLoanList(params dto.GetLoanListReq) (*dto.GetLoanListRespData, error) {
	ret := _m.Called(params)

	if len(ret) == 0 {
		panic("no return value specified for GetLoanList")
	}

	var r0 *dto.GetLoanListRespData
	var r1 error
	if rf, ok := ret.Get(0).(func(dto.GetLoanListReq) (*dto.GetLoanListRespData, error)); ok {
		return rf(params)
	}
	if rf, ok := ret.Get(0).(func(dto.GetLoanListReq) *dto.GetLoanListRespData); ok {
		r0 = rf(params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.GetLoanListRespData)
		}
	}

	if rf, ok := ret.Get(1).(func(dto.GetLoanListReq) error); ok {
		r1 = rf(params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateLoanStatus provides a mock function with given fields: loanUUID, payload
func (_m *ILoanUcase) UpdateLoanStatus(loanUUID string, payload dto.UpdateLoanStatusReq) (*dto.UpdateLoanStatusRespData, error) {
	ret := _m.Called(loanUUID, payload)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLoanStatus")
	}

	var r0 *dto.UpdateLoanStatusRespData
	var r1 error
	if rf, ok := ret.Get(0).(func(string, dto.UpdateLoanStatusReq) (*dto.UpdateLoanStatusRespData, error)); ok {
		return rf(loanUUID, payload)
	}
	if rf, ok := ret.Get(0).(func(string, dto.UpdateLoanStatusReq) *dto.UpdateLoanStatusRespData); ok {
		r0 = rf(loanUUID, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.UpdateLoanStatusRespData)
		}
	}

	if rf, ok := ret.Get(1).(func(string, dto.UpdateLoanStatusReq) error); ok {
		r1 = rf(loanUUID, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewILoanUcase creates a new instance of ILoanUcase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewILoanUcase(t interface {
	mock.TestingT
	Cleanup(func())
}) *ILoanUcase {
	mock := &ILoanUcase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

definitions:
  dto.BaseJSONResp:
    properties:
      code:
        type: integer
      data: {}
      detail: {}
      message:
        type: string
    type: object
  dto.CheckTokenReq:
    properties:
      access_token:
        type: string
    required:
    - access_token
    type: object
  dto.CheckTokenRespData:
    properties:
      email:
        type: string
      role:
        type: string
      username:
        type: string
      uuid:
        type: string
    type: object
  dto.LoginDevReq:
    properties:
      password:
        type: string
      username:
        description: username or email, but swagger oauth2password need username field
        type: string
    required:
    - password
    - username
    type: object
  dto.LoginDevResp:
    properties:
      access_token:
        type: string
      code:
        type: integer
      data: {}
      detail: {}
      message:
        type: string
    type: object
  dto.LoginReq:
    properties:
      password:
        type: string
      username_or_email:
        type: string
    required:
    - password
    - username_or_email
    type: object
  dto.LoginRespData:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
    type: object
  dto.RefreshTokenReq:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  dto.RefreshTokenRespData:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
    type: object
  dto.RegisterUserReq:
    properties:
      birthdate:
        description: DD-MM-YYYY
        type: string
      birthplace:
        type: string
      current_salary:
        type: integer
      email:
        type: string
      fullname:
        type: string
      legalname:
        type: string
      nik:
        type: string
      password:
        type: string
      username:
        type: string
    required:
    - birthdate
    - birthplace
    - current_salary
    - email
    - fullname
    - legalname
    - nik
    - password
    - username
    type: object
  dto.RegisterUserRespData:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
    type: object
info:
  contact: {}
  title: Loan Backend API
paths:
  /auth/check-token:
    post:
      parameters:
      - description: payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/dto.CheckTokenReq'
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseJSONResp'
            - properties:
                data:
                  $ref: '#/definitions/dto.CheckTokenRespData'
              type: object
      tags:
      - Auth
  /auth/login:
    post:
      parameters:
      - description: payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/dto.LoginReq'
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseJSONResp'
            - properties:
                data:
                  $ref: '#/definitions/dto.LoginRespData'
              type: object
      summary: login
      tags:
      - Auth
  /auth/login/dev:
    post:
      parameters:
      - description: payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/dto.LoginDevReq'
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseJSONResp'
            - properties:
                data:
                  allOf:
                  - $ref: '#/definitions/dto.LoginDevResp'
                  - properties:
                      data:
                        $ref: '#/definitions/dto.LoginRespData'
                    type: object
              type: object
      summary: login dev
      tags:
      - Auth
  /auth/refresh-token:
    post:
      parameters:
      - description: payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/dto.RefreshTokenReq'
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseJSONResp'
            - properties:
                data:
                  $ref: '#/definitions/dto.RefreshTokenRespData'
              type: object
      tags:
      - Auth
  /auth/register:
    post:
      parameters:
      - description: payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterUserReq'
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseJSONResp'
            - properties:
                data:
                  $ref: '#/definitions/dto.RegisterUserRespData'
              type: object
      summary: register new user
      tags:
      - Auth
securityDefinitions:
  OAuth2Password:
    description: JWT Authorization header using the Bearer scheme (add 'Bearer ' prefix).
    flow: password
    tokenUrl: /auth/login/dev
    type: oauth2
swagger: "2.0"
